services:
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    container_name: db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME:-ocean}
      LANG: C.UTF-8
      TZ: ${TZ:-Asia/Shanghai}
    volumes:
      - mysql_data:/var/lib/mysql
    privileged: true
  
  redis:
    image: redis:6
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
    restart: unless-stopped
    privileged: true
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      TZ: ${TZ:-Asia/Shanghai}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  web:
    build:
      context: .
      dockerfile: ./install/docker/ocean_web.Dockerfile
    image: ${DOCKER_REGISTRY}ocean_web:${APP_VERSION:-latest}
    container_name: web
    volumes:
      - .:/opt/ocean_ctf
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/vulnerability:/opt/vulnerability
      - /var/log/gunicorn:/var/log/gunicorn
    depends_on:
      - db
      - redis
    restart: always
    working_dir: /opt/ocean_ctf
    command: >
        gunicorn
        -b 0.0.0.0:5000
        --worker-class=eventlet
        -w ${GUNICORN_WORKERS:-2}
        --log-level=${LOG_LEVEL:-info}
        --access-logfile=/var/log/gunicorn/access.log
        --error-logfile=/var/log/gunicorn/error.log
        --preload
        wsgi:app
    environment:
      TZ: ${TZ:-Asia/Shanghai}
      FLASK_APP: ${FLASK_APP:-main.py}
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-ocean}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
  worker:
    build:
      context: .
      dockerfile: ./install/docker/ocean_web.Dockerfile
    image: ${DOCKER_REGISTRY}ocean_web:${APP_VERSION:-latest}
    container_name: worker
    depends_on:
      - db
      - redis
    volumes:
      - .:/opt/ocean_ctf
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/vulnerability:/opt/vulnerability
    restart: unless-stopped
    working_dir: /opt/ocean_ctf
    command: celery -A app.worker:celery worker -l ${LOG_LEVEL:-info}
    environment:
      TZ: ${TZ:-Asia/Shanghai}
      FLASK_APP: ${FLASK_APP:-main.py}
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-ocean}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  beat:
    build:
      context: .
      dockerfile: ./install/docker/ocean_web.Dockerfile
    image: ${DOCKER_REGISTRY}ocean_web:${APP_VERSION:-latest}
    container_name: beat
    depends_on:
      - db
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/opt/ocean_ctf
      - /opt/vulnerability:/opt/vulnerability
    restart: unless-stopped
    working_dir: /opt/ocean_ctf
    command: celery -A app.worker:celery beat -l ${LOG_LEVEL:-info}
    environment:
      TZ: ${TZ:-Asia/Shanghai}
      FLASK_APP: ${FLASK_APP:-main.py}
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-ocean}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  nginx:
    image: nginx:${NGINX_VERSION:-latest}
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    container_name: nginx
    volumes:
      - ./install/nginx.conf:/etc/nginx/nginx.conf
      - .:/opt/ocean_ctf
      - ./install/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Asia/Shanghai}

volumes:
  mysql_data:
  redis_data:
